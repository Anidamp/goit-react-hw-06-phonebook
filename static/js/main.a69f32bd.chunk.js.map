{"version":3,"sources":["components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","redux/actions.js","redux/reducer.js","redux/storage.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addNewContact","createAction","delContact","contactsFilter","contactReducer","createReducer","id","name","number","state","payload","some","el","toLowerCase","alert","filter","contact","setFilterReducer","_","combineReducers","contacts","persistConfig","key","version","storage","blacklist","phoneBookReducer","persistPhoneBookReducer","persistReducer","store","configureStore","reducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","ContactForm","useState","setName","setNumber","dispatch","useDispatch","handleChange","e","target","value","reset","className","s","form","onSubmit","preventDefault","uuidv4","input","onChange","type","pattern","title","required","button","ContactList","useSelector","toLocaleLowerCase","includes","list","map","item","btn","onClick","Filter","setFilter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.a69f32bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__1Rk2X\",\"item\":\"ContactsList_item__1SGje\",\"btn\":\"ContactsList_btn__3_Xl1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2LB2e\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addNewContact = createAction('contacts/add');\r\nexport const delContact = createAction('contacts/del');\r\nexport const contactsFilter = createAction('filter/set');","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addNewContact, delContact,  contactsFilter } from './actions';\r\n\r\nconst initialContacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nexport const contactReducer = createReducer(initialContacts, {\r\n  [addNewContact]: (state, { payload }) => {\r\n    const existContact = state.some(\r\n      el => el.name.toLowerCase() === payload.name.toLowerCase(),\r\n    );\r\n    if (existContact) {\r\n      alert(`this contact already exists`);\r\n      return state;\r\n    } else {\r\n      return [...state, payload];\r\n    }\r\n  },\r\n  [delContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nexport const setFilterReducer = createReducer(\"\", {\r\n    [contactsFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactReducer,\r\ncontactsFilter: setFilterReducer,\r\n});\r\nexport default rootReducer;","import { combineReducers } from \"redux\";\r\nimport { setFilterReducer, contactReducer } from \"./reducer\";\r\nimport logger from \"redux-logger\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst persistConfig = {\r\n    key: \"products\",\r\n    version: 1,\r\n    storage,\r\n    blacklist: [\"filter\"],\r\n};\r\n\r\nconst phoneBookReducer = combineReducers({\r\n    contacts: contactReducer,\r\n    filter: setFilterReducer,\r\n});\r\n\r\nconst persistPhoneBookReducer = persistReducer(persistConfig, phoneBookReducer);\r\n\r\nexport const store = configureStore({\r\n    reducer: persistPhoneBookReducer,\r\n    devTools: process.env.NODE_ENV === \"development\",\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware({\r\n            serializableCheck: {\r\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n            },\r\n        }).concat(logger),\r\n});\r\n\r\nexport const persistor = persistStore(store);","import { useState } from 'react';\nimport s from './ContactForm.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch } from 'react-redux';\nimport { addNewContact } from '../../redux/actions';\n\nexport default function ContactForm () {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case'name' :\n       setName(value);\n       break;\n      case 'number':\n        setNumber(value);\n        break;\n      default: \n      return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n    dispatch(addNewContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('')\n  };\n\n  return (\n        <form className={s.form} onSubmit={handleSubmit}>\n          <label>\n            Name\n            <input\n              className={s.input}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label>\n            Number\n            <input\n              className={s.input}\n              onChange={handleChange}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button type=\"submit\" className={s.button}>\n            Add contact\n          </button>\n        </form>\n    );\n}","import s from './ContactsList.module.css';\nimport { useDispatch,  useSelector } from 'react-redux';\nimport { delContact } from '../../redux/actions';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n   const contacts = useSelector(state =>\n    state.contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(state.filter.toLowerCase()),\n    ),\n  );\n   \n  return (\n    <ul className={s.list}>\n      {contacts.map(({id, name, number,}) =>\n        <li key={id} className={s.item}>\n          <p>{name}</p>\n          <p>{number}</p>\n          <button  className={s.btn} type='button' onClick={() => dispatch(delContact(id))}>X</button>\n        </li>)}\n    </ul>\n  )\n};\n\n","import s from './Filter.module.css';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { contactsFilter } from '../../redux/actions';\n\nexport default function Filter() {\n  const [filter, setFilter] = useState('');\n  const dispatch = useDispatch();\n\n  const onFilterChange = (e) => {\n        setFilter(e.target.value);\n        dispatch( contactsFilter(e.target.value));\n    };\n  return (\n    <label>\n      Find contacts by name:\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilterChange}\n      />\n    </label>\n  );\n}","import './App.css';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App () {\n\n  \n\n /*  const addNewContact = obj => {\n    const { name } =obj;\n    if (contacts.some(({ name }) => name ===obj.name)) {\n      alert(`Sorry, ${name} is already in contacts list`);\n      return;\n    }\n    return(\n      setContacts(prev => [...prev,obj])\n    );\n  }; */\n\n /*  const handleDelContact = id => {\n    const filteredItem = contacts.filter(contact => contact.id !== id);\n    setContacts(filteredItem);\n  }; */\n\n /*  const onChangeFilter = e => {\n    setFilter(e.target.value );\n  };\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  }; */\n  return (\n      <div className=\"App\">\n        <h2>Phonebook</h2>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList />\n      </div>\n\n  );\n}\n\n\n\n","import React from 'react';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { store, persistor } from './redux/storage';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate persistor={persistor} loading={null}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__3FToW\",\"button\":\"ContactForm_button__HOwas\"};"],"sourceRoot":""}